*동적계획법(Dynamic Programming) vs 분할정복법(Divide & Conquer)
D.C : 작은 문제로 분할 , Recursively , Return & Merge
D.P : 작은 해의 조합 -> 큰 문제의 해 , Directly, Store & Reuse

*Fibo by Memoization Algo
각 값이 한번만 재귀호출이 되기 때문에 총 n+1 호출 -> O(n)

*Tiling ver2
A[i] = A[i-1] + A[i-2] + 2B[i-1]
B[i] = B[i-1] + A[i -2]

*DP 전략
1. 최적해의 분석
2. 해의 점화식 유도
3. 순서에 따라 DP테이블 채우기
4. 알고리즘의 정확성 체크 

*LIS(longest increasing subsequence)
###Example###
A = [2, 8, 25, 10, 18, 13, 20, 4]
LIS[i]  = A[i]로 끝나는 LIS 길이 = max(LIS[j]) +1 @condition (A[j] < A[i]) & (j < i) 
return max(LIS)

L[0] = 1
for i in range(1, n):
	#LIS[i] 계산
	LIS[i] = 1
	for j in range(0, i):
		if A[j] < A[i]:
			LIS[i] = max(LIS[j]+1, LIS[i])
=> O(n^2)

M[k] = 길이가 k인 증가 부수열 중 가장 작은 끝수의 index

-Processing
LIS = [1, 2, 3, 3, 4, 4, 5, 2]
M = [x, 0, 7, 3, 5, 6]
--> A[M[1]] < A[M[2]] < A[M[3]] @증가하기 때문에 이진탐색으로 업데이트한다.
####################

*Zig-zag
###Example###
low[i] = A[i]가 low로 끝나는 가장 긴 zig-zag 수열 길이, 직전 값 A[j] high로 끝남
= max(high[j]) + 1 @condition (j < i) & (j < i)
high[i] = A[i]가 high로 끝나는 가장 긴 zig-zag 수열 길이, 직전 값 A[j] low로 끝남
############

*LCS(Longest Common Subsequence)
###Example###
끝 문자가 동일 한 경우
X_7 = ABCBDAB
Y_6 = BDCABA
LCS[X_7, Y_6] = max(LCS[X_6, Y_6], LCS[X_7, Y_5])		@if X[7] != Y[6]
		    LCS[X_6, Y_5] + 1				@if X[7] == Y[6]
############

LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])		@if X_i != Y_j
	     LCS[i-1][j-1] + 1			@if X_i == Y_j

############
DP Table Solution p.112
0 0 0 0 0 0 0 
0 0 0 0 1 1 1
0 1 1 1 1 2 2
0 1 1 2 2 2 2
0 1 1 2 2 3 3
0 1 2 2 2 3 3
0 1 2 2 3 3 4
0 1 2 2 3 4 4
############

*행렬 곱셈 순서
DP[i][j] = M_i * M_i+1 * ... * M_j-1 * M_j 의 최소비용
	 = min (DP[i][k] + DP[k+1][j] + P_i * P_k+1 * P_j+1) @ i <= k < j

*Greedy Algorithm
###
동전교환 문제
DP[i][s] = 동전번호 1, ... i 번 동전을 이용해 S원을 교환할 때 최소 동전 수
	  = min(DP[i-1][s], DP[i][s-i] + 1)

0 1 2 3 4 .. S (동전금액)
1
2
3
4
..
n(동전단위)

O(nS) => Pseudo Polynominal Time
n:입력크기 S:입력값
###

###Scheduling###
A = [(1, 3), (2, 6), (5, 9) ...]
S = [1, 5, 2, ....]
F = [3. 9, 6, ....]
A.sort( key = lambda x : x[1])  @O(nlogn)
L, selected = [0], 0
for i in range(1, n):		@O(n)
	if A[selected][1] <= A[i][0]:    @안겹치는 경우 
		L.append(i)
		selected = i  	   
return L
##########

*Pinning 
본질적으로 강의실 배정문제와 동일
겹치는 구간 중에서 가장 오른쪽에 못을 배치 -> 못 배치 후 못의 좌측은 신경 X -> 우측만 신경 -> 우측 구간 최소 만들기
n개 구간 최소 못 계산 -> greedy
m개 못 최대 관통구간 개수 계산 -> DP

*BackTracking
Subset Sum 
n개의 양의 정수 집합A에서 목표 값 S가 되도록 Subset 추출
X리스트 생성 -> k번쨰 원소 선택한 경우 1, 선택 X 경우 0 으로 리스트 세팅
###Example###
A = [3 ,5, 1, 6] , S = 6
X = [0, 1, 1, 0]
X = [0, 0, 0, 1]

def Backtrack1(k): #X[k]를 결정
	CurrentSum = sum(A[i] * X[i] for i in range(k))
	if k == n: #X[0] , X[1] .... X[n]
		if CurrentSum == S: print(X)
	else:
		#X[k] = 1
		if CurrentSum + A[k] <= S:
			X[k] = 1
			Backtrack1(k+1)
		#X[k] = 0
		X[k] = 0
		Backtrack1(k+1)

def Backtrack2(k): #A의 값이 정렬되어 있음
	CurrentSum = sum(A[i] * X[i] for i in range(k))
	if k == n: return
	else:
		if CurrentSum + A[k] <= S:
			X[k] = 1
			if CurrentSum + A[k] == S:
				print(X)
			else:
				Backtrack2(k+1)
			X[k] = 0
			Backtrack2(k+1)
#############

*Knapsack
Profit(0/1 Knapsack) <= Profit(Fractional Knapsack)
0/1 Knapsack Algo
한계함수 중요
1. SIZE 조건
2. Fractional을 통한 예상이익
F(예상이익) > Max Profit 인 경우 탐색 계속 진행

###Example###
k = 5
p = [15, 16, 6]
s = [3, 4, 2]
p/s = [5, 4, 3]

->profit(fractional) = 23
->profit(0/1) = 21
############

n개 item, 배낭size : k
이익(n개 item, k) 
-> n번째 item 선택O -> P[n] + 이익((n-1)개 item, K-S[n])
-> n번째 item 선택X -> 이익((n-1)개 item, k)

DP[n][k] = max(DP[n-1][k-s[n]] + P[n], DP[n-1][k])

DP[n][p] = n개 item으로 이익이 p이하가 될 때 선택된 item의 최소 크기 합
	   = min(DP[n-1][p-p[n]], DP[n-1][p])

* Algorithms straegy
D&C, DP, greedy (다항시간)
Backtracking (Hard)

*n개 노드 구성된 연결트리의 에지는 항상 n-1개

*그래프 표현법 2가지
1. 인접 행렬(2차원 배열)
2. 인접 리스트
 